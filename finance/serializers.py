from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Currency, Transaction
# To link to Order from shop app
from shop.models import Order 
from shop.serializers import OrderSerializer # Potentially for read-only representation

class CurrencySerializer(serializers.ModelSerializer):
    class Meta:
        model = Currency
        fields = ['id', 'name', 'code', 'symbol', 'exchange_rate', 'is_default', 'is_active', 'created_at', 'updated_at']
        read_only_fields = ('created_at', 'updated_at')

class TransactionSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField(read_only=True)
    # order = OrderSerializer(read_only=True) # Could be too verbose, consider just order_id or order_number
    order_id = serializers.PrimaryKeyRelatedField(queryset=Order.objects.all(), source='order', write_only=True, required=False, allow_null=True)
    order_number = serializers.CharField(source='order.order_number', read_only=True, allow_null=True)
    currency_code = serializers.CharField(source='currency.code', read_only=True)
    
    # For creating transactions, allow specifying currency by its code
    currency_id = serializers.PrimaryKeyRelatedField(queryset=Currency.objects.filter(is_active=True), source='currency', write_only=True)

    class Meta:
        model = Transaction
        fields = [
            'id', 'order_id', 'order_number', 'user', 'transaction_id_external', 'amount', 
            'currency_id', 'currency_code', 'transaction_type', 'status', 
            'payment_method_details', 'gateway_response_raw', 'notes', 
            'parent_transaction', 'created_at', 'processed_at'
        ]
        read_only_fields = ('transaction_id_external', 'gateway_response_raw', 'created_at', 'processed_at', 'order_number', 'currency_code')
        # transaction_id_external is usually provided by the payment gateway after processing.
        # status is also often updated based on gateway response.

class TransactionCreateSerializer(serializers.ModelSerializer):
    """Serializer for initiating a transaction, typically a payment."""
    order_id = serializers.PrimaryKeyRelatedField(queryset=Order.objects.all(), source='order', required=True)
    currency_id = serializers.PrimaryKeyRelatedField(queryset=Currency.objects.filter(is_active=True), source='currency', required=True)
    # Amount might be derived from the order or specified, depending on workflow
    # transaction_id_external is generated by the gateway, not provided by client at creation.

    class Meta:
        model = Transaction
        fields = [
            'order_id', 'amount', 'currency_id', 'transaction_type', 
            'payment_method_details', 'notes' # e.g. card nonce, payment token from frontend
        ]
        # Status defaults to 'pending'

    def validate(self, data):
        order = data.get('order')
        amount = data.get('amount')
        # Basic validation: ensure transaction amount matches order total if it's a 'payment' type
        if data.get('transaction_type') == 'payment':
            if order and amount != order.total_amount:
                # This validation might be too strict if partial payments are allowed or if amount includes fees/taxes not in order.total_amount
                # Consider making it more flexible or handling this logic in the view / payment processing service
                # raise serializers.ValidationError(f"Transaction amount ({amount}) does not match order total ({order.total_amount}).")
                pass # For now, allowing flexibility. Real system would need clearer rules.
        return data


class TransactionUpdateSerializer(serializers.ModelSerializer):
    """Serializer for updating transaction status, e.g., after gateway callback."""
    class Meta:
        model = Transaction
        fields = [
            'status', 'transaction_id_external', # Gateway might provide this after initial attempt
            'gateway_response_raw', 'notes', 'processed_at'
        ]
        # Most fields are updated by the system/gateway callback, not directly by admin unless for manual correction.
        read_only_fields = ['processed_at'] # processed_at is set automatically based on status in model's save method
